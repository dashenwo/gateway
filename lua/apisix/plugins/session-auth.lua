---
--- Generated by Luanalysis
--- Created by liuqin.
--- DateTime: 2020/10/13 下午5:45
---
local core        = require("apisix.core")
local plugin_name = "session-auth"
local schema = {
    type = "object",
    properties = {
        --存储驱动前缀
        prefix = {type="string",minimum = 1, default = "sessions",title="存储前缀"},
        --加密字符串
        secret={type="string",minLength=1,title="密匙"},
        --前缀
        name = {type="string",minimum = 1, default = "session_id",title="session名称"},
        --是否必须验证登录
        must = {type="boolean", default = true,title ="必须登录"},
        --redis请求超时时间
        timeout = {
            type = "integer", minimum = 1,
            default = 1000,
            title ="请求超时"
        },
        storage = {
            type = "string",
            enum = {"redis", "memcache"},
            default = "redis",
            title ="存储驱动"
        },
        password = {type="string",minLength = 0,title="存储驱动密码（如redis的密码）"},
    },
    required = {"name","prefix","timeout","storage","secret","must"},
    dependencies = {
        storage = {
            oneOf = {
                {
                    properties = {
                        storage = {
                            enum = {"redis"},
                        },
                        hosts = {
                            type = "array",
                            items = {
                                type = "object",
                                properties = {
                                    ip = {type="string"},
                                    port = {type = "integer",minimum = 1, default = 6379,}
                                },
                                required = {"ip","port"},
                            },
                            minItems = 1
                        }
                    },
                    required = {"mode"},
                },
                {
                    properties = {
                        storage = {
                            enum = {"memcache"},
                        },
                        host = {
                            type = "object",
                            properties = {
                                ip = {type="string"},
                                port = {type = "integer",minimum = 1, default = 6379,}
                            },
                            required = {"ip","port"},
                        },
                    },
                },
            }
        }
    }
}
local _M = {
    version  = 0.1,
    priority = 3200,
    type = 'auth',
    name     = plugin_name,
    schema   = schema,
}
local messages = {
    logout = {code=401,msg = "用户登录过期，请重新登录！"}
}
function _M.check_schema(conf)
    local ok, err = core.schema.check(schema, conf)
    if not ok then
        return false, err
    end
    return true
end
do
    function _M.rewrite(conf, ctx)
        local manager = require("apisix.lib.session-auth.manager")
        local config = {
            name        =       conf.name,
            storage     =       conf.storage,
            secret      =       conf.secret,
        }
        if conf.storage=="redis" then
            config.redis = {
                prefix = conf.prefix,
                auth = conf.password,
                connect_timeout = conf.timeout,
                read_timeout =conf.timeout,
                send_timeout=conf.timeout,
                pool = {
                    name = "sessions",
                    timeout = 60000,
                    size = 1000,
                    backlog=10
                },
            }
            --集群模式
            if #conf.hosts>1 then
                config.redis.cluster = {
                    name = plugin_name,
                    dict = plugin_name,
                    nodes = conf.hosts
                }
            else
            end
        elseif conf.storage=="memcache" then
        end
        local session = manager.start(config)
        --如果该api限制必须登录使用，但又没有登录则给出提示
        core.log.error(conf.must)
        if conf.must and not session.data.jwt then
            return 200,messages.logout
        end
        -- 解析
        session:save()
    end
end  -- do
return _M